#+AUTHOR: Raghav Mittal
#+TITLE: Joiner Implementation

** Namespace
#+begin_src js :tangle joiner.js
var annolet = {};
#+end_src

** Classes
*** keys
#+NAME: class_keys
#+begin_src js :tangle joiner.js :noweb yes
annolet.keys = {
  fileCSS: null,
  index: 0,
  HTMLParentTagName: "body",
  newTagName: null,
  newTagId: null,
  newTagClass: null,
  innerHTMLText: "",
  fileJS: "#",
  JSParentTagName: "head",
  buttonName: null,
  buttonOnClick: null,
  init:
    <<annolet.keys.init>>,
  loadJSON:
    <<annolet.keys.loadJSON>>,
}
#+end_src
#+NAME: annolet.keys.init
#+begin_src js :exports none
function(manifestObject){
  if(manifestObject.fileCSS) annolet.keys.fileCSS = manifestObject.fileCSS;
  if(manifestObject.index) annolet.keys.index = manifestObject.index;
  if(manifestObject.HTMLParentTagName) annolet.keys.HTMLParentTagName = manifestObject.HTMLParentTagName;
  if(manifestObject.newTagName) annolet.keys.newTagName = manifestObject.newTagName;
  if(manifestObject.newTagId) annolet.keys.newTagId = manifestObject.newTagId;
  if(manifestObject.newTagClass) annolet.keys.newTagClass = manifestObject.newTagClass;
  if(manifestObject.innerHTMLText) annolet.keys.innerHTMLText = manifestObject.innerHTMLText;
  if(manifestObject.fileJS) annolet.keys.fileJS = manifestObject.fileJS;
  if(manifestObject.JSParentTagName) annolet.keys.JSParentTagName = manifestObject.JSParentTagName;
  if(manifestObject.buttonName) annolet.keys.buttonName = manifestObject.buttonName;
  if(manifestObject.buttonOnClick) annolet.keys.buttonOnClick = manifestObject.buttonOnClick;
}
#+end_src
#+NAME: annolet.keys.loadJSON
#+begin_src js :exports none
function(){
  /*
    This function is for getting json from server and loading it to
    frontend. it will help us in calling webservices to from using
    manifest file JSON file.
  */
  var pathJSON = "https://rawgit.com/SSS-Studio-development/joiner/master/src/jsonj.json";
  $.getJSON(pathJSON, function (json) {
    annolet.keys.json = json;
/*
      for(var i=0; i<json.intial.length; i++){
        annolet.inject.init(json.initial[i]);
        annolet.inject.injectCSS();
        annolet.inject.injectHTML();
        annolet.inject.injectJS();
      }
*/
  });
}
#+end_src

*** inject
#+NAME: class_inject
#+begin_src js :noweb yes :tangle joiner.js
annolet.inject = {
  injectCSS:
    <<annolet.inject.injectJS>>,
  injectHTML: 
    <<annolet.inject.injectHTML>>,
  injectCSS:
    <<annolet.inject.injectCSS>>,
}
#+end_src
#+NAME: annolet.inject.injectJS
#+begin_src js :exports none
function(){
  /*
    JSParentTagName(optional)(defaut: 'head')- usually JS is injected into '<head>' but if you want to
    inject under someother node then specify.
    jsLocation(required)(default: '#') - location of js file which is to be injected
  */
  var script = document.createElement("script");
  script.type="text/javascript"
  script.src = annolet.keys.fileJS;
  document.getElementsByTagName(annolet.keys.JSParentTagName)[0].appendChild(script);
}
#+end_src
#+NAME: annolet.inject.injectHTML
#+begin_src js :exports none
function(){
  /*
    HTMLParentTagName: name of parent node (optional)(default: body)
    index: index of parent node under which new element will be created(optional)(default: 0)
    newTagName: name of new child node to be created(optinal)(default: appends HTML to body)
    newTagId: id of newTagName (optional)(default: NULL)
    newTagClass: className of newTagName (optional)(default: NULL)
    innerHTMLText: html to be inserted into DOM. (required)
    if you dont want to add new child, then dont provide newTagId, newTagName, newTagClass
  */
  var parent = document.getElementsByTagName(annolet.keys.HTMLParentTagName)[annolet.keys.index];
  // if newTagName is given, else append innerHTML to body.
  if(annolet.keys.newTagName){
     var tagName = document.createElement(annolet.keys.newTagName);
    if(annolet.keys.newTagId){tagName.id += ' ' + annolet.keys.newTagId;}
    if(annolet.keys.newTagClass){tagName.className += annolet.keys.newTagClass;}
    tagName.innerHTML = annolet.keys.innerHTMLText;
    parent.appendChild(tagName);
  }
  else {parent.innerHTML += "\n" + annolet.keys.innerHTMLText;}
}
#+end_src
#+NAME: annolet.inject.injectCSS
#+begin_src js :exports none
function(){
  var link = document.createElement('link');
  link.href = annolet.keys.fileCSS + "?v=" + parseInt(Math.random() * 999); //a random mock version number is added everytime file is called to prevent loading of cached css file by browser.
  link.type = "text/css";
  link.rel = "stylesheet";
  document.getElementsByTagName('head')[0].appendChild(link);
}
#+end_src
*** create
#+NAME: class_create
#+begin_src js :tangle joiner.js
annolet.create={
  loadServices: function(),
  populateList: function()
}
#+end_src
